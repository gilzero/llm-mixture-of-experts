# -*- coding: utf-8 -*-
"""moe00.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1GZ3Q2z9uyUjnPAD6jh80bAsHmBwIFKig
"""

!pip install langchain-openai langchain-anthropic langchain-xai langchain-google-genai altair --quiet

!pip install langchain-openai langchain-anthropic langchain-xai langchain-google-genai altair --quiet

import os
from google.colab import userdata
import altair as alt
import pandas as pd
from IPython.display import display

if not os.environ.get("OPENAI_API_KEY"):
    os.environ["OPENAI_API_KEY"] = userdata.get("OPENAI_API_KEY")
if not os.environ.get("ANTHROPIC_API_KEY"):
    os.environ["ANTHROPIC_API_KEY"] = userdata.get("ANTHROPIC_API_KEY")
if not os.environ.get("XAI_API_KEY"):
    os.environ["XAI_API_KEY"] = userdata.get("XAI_API_KEY")
if not os.environ.get("GOOGLE_API_KEY"):
    os.environ["GOOGLE_API_KEY"] = userdata.get("GOOGLE_API_KEY")



import os
from google.colab import userdata
from langchain_openai import ChatOpenAI
from langchain_anthropic import ChatAnthropic
from langchain_xai import ChatXAI
from langchain_google_genai import ChatGoogleGenerativeAI

if not os.environ.get("OPENAI_API_KEY"):
    os.environ["OPENAI_API_KEY"] = userdata.get("OPENAI_API_KEY")
if not os.environ.get("ANTHROPIC_API_KEY"):
    os.environ["ANTHROPIC_API_KEY"] = userdata.get("ANTHROPIC_API_KEY")
if not os.environ.get("XAI_API_KEY"):
    os.environ["XAI_API_KEY"] = userdata.get("XAI_API_KEY")
if not os.environ.get("GOOGLE_API_KEY"):
    os.environ["GOOGLE_API_KEY"] = userdata.get("GOOGLE_API_KEY")

# define expert styles

expert_styles = {
    "technical": "Focus on detailed technical explanations.",
    "creative": "Use imaginative, broad storytelling approaches.",
    "business": "Emphasize strategic and economic impacts."
}


def create_expert(model, style, temperature=0, max_tokens=256):
    style_prompt = f"You are an expert with style: {style}."
    def invoke_expert(query):
        return model.invoke([("system", style_prompt), ("user", query)]).content
    return invoke_expert

# Create experts with different styles

openai_expert = create_expert(ChatOpenAI(model="gpt-4o", temperature=0, max_tokens=256), "technical")

anthropic_expert = create_expert(ChatAnthropic(model="claude-3-5-haiku-20241022", temperature=0, max_tokens=256), "creative")

xai_expert = create_expert(ChatXAI(model="grok-beta", temperature=0, max_tokens=256), "business")

supervisor_model = ChatGoogleGenerativeAI(model="gemini-2.0-flash-exp", temperature=0, max_tokens=512)

def get_expert_responses(query):
    # Step 1: Gathering Expert Insights
    print("üîç Gathering insights from our AI experts...")
    return {
        "OpenAI": openai_expert(query),
        "Anthropic": anthropic_expert(query),
        "xAI": xai_expert(query)
    }

def invoke_supervisor(role, content, task):
    # Step: Invoking the Supervisor AI
    print(f"üßë‚Äçüíº Invoking Supervisor AI as {role} to {task}")
    prompt = [
        ("system", f"You are a supervisor {role}. {task}"),
        ("user", content)
    ]
    return supervisor_model.invoke(prompt).content

def consensus_analysis(responses):
    # Step 2: Consensus Analysis
    print("\nüîÑ Analyzing consensus among expert responses...")
    task = "Analyze the following experts' responses. Provide a consensus analysis and highlight disagreements."
    content = "\n".join([f"{name}: {resp}" for name, resp in responses.items()])
    return invoke_supervisor("analyzing responses", content, task)

def generate_charts_mindmaps(responses):
    # Step 3: Visual Representation
    print("\nüìä Generating charts and mindmaps for visual representation...")
    task = "Generate useful charts or mindmap descriptions in concise text."
    content = f"Content:\n\n{responses}"
    return invoke_supervisor("generating charts or mindmaps", content, task)

def analyze_tools(responses):
    # Step 4: Detailed Analysis
    print("\nüîé Running analysis tools on the responses...")
    task = (
        "Perform sentiment analysis, bias detection, uncertainty highlighting, "
        "and jargon explanation. Separate each analysis by sections."
    )
    content = f"Text:\n\n{responses}"
    return invoke_supervisor("performing analysis tools", content, task)

def suggest_related_questions(responses):
    # Step 5: Encouraging Further Exploration
    print("\n‚ùì Suggesting questions to dive deeper...")
    task = "Provide related questions for deeper learning."
    content = f"Text:\n\n{responses}"
    return invoke_supervisor("suggesting learning questions", content, task)

def meta_analysis(responses):
    # Step 6: High-Level Analysis
    print("\nüß† Performing meta-analysis on the collected data...")
    task = "Evaluate quality metrics and perform pattern recognition."
    content = f"Text:\n\n{responses}"
    return invoke_supervisor("performing meta-analysis", content, task)

def run_full_workflow(query):
    # Starting the full analysis workflow
    print("\nüöÄ Initiating the full analysis workflow...")
    responses = get_expert_responses(query)
    combined_responses = "\n".join([f"{name}:\n{resp}" for name, resp in responses.items()])

    return {
        **responses,
        "Consensus_Analysis": consensus_analysis(responses),
        "Charts_Mindmaps": generate_charts_mindmaps(combined_responses),
        "Analysis_Tools": analyze_tools(combined_responses),
        "Related_Questions": suggest_related_questions(combined_responses),
        "Meta_Analysis": meta_analysis(combined_responses)
    }

# Run full workflow . Take some times.

query_example = "Explain how generative AI impacts modern software development."
query_example = "Explain how Data analysis and data science are different"
results = run_full_workflow(query_example)

def display_results(results, query_example):
    # Header for the entire output with some flair
    print("=== ‚ú® Workflow Results ‚ú® ===")
    print(f"üîç Query: {query_example}\n")

    # 1. Display Expert Responses with Icons
    print("=== üß† Expert Responses ===")
    expert_icons = {"OpenAI": "ü§ñ", "Anthropic": "üß†", "xAI": "üß¨"}
    for expert, response in {k: v for k, v in results.items() if k.endswith("Response")}.items():
        print(f"{expert_icons.get(expert, 'üë§')} {expert.replace('_Response', '')}:\n{response}\n")

    # 2. Display Other Sections with Clean Headings and Icons
    sections = {
        "Charts_Mindmaps": ("üìä", "Charts and Mindmaps"),
        "Analysis_Tools": ("üî¨", "Analysis Tools"),
        "Related_Questions": ("‚ùì", "Related Questions"),
        "Meta_Analysis": ("üß†", "Meta Analysis"),
        "Consensus_Analysis": ("üîÑ", "Consensus Analysis")
    }

    for key, (icon, title) in sections.items():
        if key in results:
            print(f"=== {icon} {title} ===")
            # Split the content into lines for better readability
            for line in results[key].split('\n'):
                print(line)
            print("\n")

# Example usage
# query_example = "Explain how generative AI impacts modern software development."
# results = run_full_workflow(query_example)
display_results(results, query_example)

from rich.console import Console
from rich.markdown import Markdown

console = Console()

# Header for the entire output
console.print("[bold blue]=== Workflow Results ===[/bold blue]")
console.print(f"[italic]Query:[/italic] {query_example}\n")

# 1. Display Expert Responses
console.print("[bold green]=== Expert Responses ===[/bold green]")
for expert, response in {k: v for k, v in results.items() if k.endswith("Response")}.items():
    console.print(f"[bold]{expert.replace('_Response', '')}:[/bold]")
    console.print(response)
    console.print("\n")

# 2. Display Consensus Analysis
if "Consensus_Analysis" in results:
    console.print("[bold magenta]=== Consensus Analysis ===[/bold magenta]")
    console.print(Markdown(results["Consensus_Analysis"]))
    console.print("\n")

# 3. Display Other Sections with Markdown Rendering
sections = {
    "Charts_Mindmaps": "Charts and Mindmaps",
    "Analysis_Tools": "Analysis Tools",
    "Related_Questions": "Related Questions",
    "Meta_Analysis": "Meta Analysis"
}

for key, title in sections.items():
    console.print(f"[bold yellow]=== {title} ===[/bold yellow]")
    console.print("\n")
    console.print(Markdown(results[key]))
    console.print("\n")
    console.print("\n")
    console.print("\n")